====================================================
PART 1: Fibonacci Sequence using Pre-Test Loop
====================================================
.text
.extern printf            // Link to C library printf
.global main              // Entry point for gcc

main:
    mov x19, #0           // x19 = a = 0 (first number in Fibonacci)
    mov x20, #1           // x20 = b = 1 (second number)
    mov x21, #0           // x21 = i = 0 (loop counter)
    mov x22, #10          // x22 = limit = 10 numbers

_looptop:
    ldr x0, =string1      // Load address of format string into x0
    mov x1, x19           // Move current Fibonacci value (a) into x1
    bl printf             // Call printf("%d\n", a)

    add x23, x19, x20     // x23 = a + b
    mov x19, x20          // a = b
    mov x20, x23          // b = a + b (next Fibonacci number)

    add x21, x21, #1      // i++
    cmp x21, x22          // if (i < 10)
    blt _looptop          // loop again

_exit:
    mov x8, #93           // syscall for exit
    mov x0, #0            // return code 0
    svc #0                // system call

.data
.global string1
string1:
    .ascii "%d\n"         // format string for printf
csharp
Copy
Edit
====================================================
PART 2: Factorial (7!) using Pre-Test Loop
====================================================
.text
.extern printf
.global main

main:
    mov x20, #7           // x20 = counter = 7 (start from 7)
    mov x19, x20          // x19 = result = 7

_looptop:
    cmp x20, #1           // if counter == 1 â†’ done
    beq _exit             // exit if done

    sub x20, x20, #1      // counter--
    mul x19, x19, x20     // result *= counter

    b _looptop            // loop again

_exit:
    ldr x0, =string1      // format string address
    mov x1, x19           // move factorial result into x1
    bl printf             // print result

    mov x8, #93           // syscall: exit
    mov x0, #0
    svc #0

.data
.global string1
string1:
    .ascii "%d\n"         // format string
csharp
Copy
Edit
====================================================
PART 3: Print Numbers from 0 to 99 using Post-Test Loop
====================================================
.text
.extern printf
.global main

main:
    mov x19, 0x0          // x19 = value to print (starts at 0)
    mov x20, #100         // x20 = stop at 100

_looptop:
    ldr x0, =string1      // printf format
    mov x1, x19           // move value into argument
    bl printf             // print x19

_a1:
    adds x19, x19, #1     // increment x19
    cmp x19, x20          // if x19 != 100
    bne _looptop          // repeat

_exit:
    mov x8, #93           // syscall: exit
    mov x0, #0
    svc #0

.data
.global string1
string1:
    .ascii "%d\n"

